---
title: "FOWSNIFF CTF CHALLENGE"
date: 2025-09-14 01:09:33 +0300
description: FowSniff CTF Challenge
image: /assets/images/cover.webp
categories: [WEB, Cryptography, Easy, KenyaCyberlympics]
tags: [WEB, Cryptography, Easy, KenyaCyberlympics]
---

# Fowsniff CTF

**Task 1: Deploy the machine**

The first step was to deploy the machine and connect to their network using OpenVPN because I used VPN. You can choose to use the Attack box as well; it's easier if you find it hard to connect to VPN.

![image.png](/assets/images/image.png)

The next thing was to ping the machine’s IP address ‘10.10.213.180’. The IP addresses will vary depending on the machine deployed. I did not get any results, probably because the system and its firewall were blocking ICMP packets, or the machine was not up yet.

**Task 2: Using Nmap scan the machine. What ports are open?**

So I used Nmap to scan for open ports. The command used is: 

```bash
nmap -A -sV <IP Address>
```

The open ports found were: 22/tcp, 80/tcp, 110/tcp and 143/tcp for SSH, HTTP, POP3, and IMAP respectively.

![image.png](/assets/images/nmap-scan.png)

**Task 3: Using Google to find publicly available information about the IP address**

Using Google, I searched the IP address and found the website related to the IP address called *Fowsniff Corp.*

![image.png](/assets/images/fowsniff-website.png)

There is also a GitHub account called [https://github.com/berzerk0/Fowsniff](https://github.com/berzerk0/Fowsniff). This account has a file called `fowsniff.txt` which contains Fowsniff Corp password leaks.

[https://github.com/berzerk0/Fowsniff](https://github.com/berzerk0/Fowsniff)

![image.png](/assets/images/password-leak.png)

I decoded the passwords using password cracker tools called Hashkiller and CrackStation. Feel free to use any password cracker of your choice. Here are the results:

1. `mauer@fowsniff`: 8a28a94a588a95b80163709ab4313aa4 - mailcall
2. `mustikka@fowsniff`: ae1644dac5b77c0cf51e0d26ad6d7e56 - bilbo101
3. `tegel@fowsniff`: 1dc352435fecca338acfd4be10984009 - apple01
4. `baksteen@fowsniff`: 19f5af754c31f1e2651edde9250d69bb - skyler22
5. `seina@fowsniff`: 90dc16d47114aa13671c697fd506cf26 - scoobydoo2
6. `stone@fowsniff`: a92b8a29ef1183192e3d35187e0cfabd - 
7. `mursten@fowsniff`: 0e9588cb62f4b6f27e33d449e2ba0b3b - carp4ever
8. `parede@fowsniff`: 4d6e42f56e127803285a0a7649b5ab11 - orlando12
9. `sciana@fowsniff`: f7fd98d380735e859f8b2ffbbede5a7e - 07011972

**Task 4: Brute force POP3 login using Metasploit**

I first created two files named `users.txt` and `password.txt` using the nano text editor.

![image.png](/assets/images/users.txt.png)

![image.png](/assets/images/password.txt.png)

Since the instructions are to brute force POP3 login, I searched for a POP3 login utility and here we are going to use the 3rd option: `auxiliary/scanner/pop3/pop3_login`.

![image.png](/assets/images/pop3-search.png)

The next command should be `use 3`.

![image.png](/assets/images/use3-command.png)

Now, set our target machine as the remote host, `password.txt` as the PASS_FILE and `users.txt` as the USER_FILE. The commands are as follows:

1. `set rhosts <IP Address>`
2. `set USER_FILE users.txt`
3. `set PASS_FILE password.txt`

After setting these files, execute the `run` command.

![image.png](/assets/images/settings.png)

**Task 5: What is Seina’s password to the email server?** 

![image.png](/assets/images/run-command.png)

Seina’s password is `scoobydoo2`.

**Task 6: Login to POP3 mail server using Seina’s username and password and read the emails**

![image.png](/assets/images/nc-result.png)

Using `nc` and the host address and POP3 port 110, I logged in using the username `seina` and password `scoobydoo2`. We can see there are two messages: 1622 and 1280.

We can use the command `RETR <message>` to read the contents of the emails.

1. The first message:

    ![image.png](/assets/images/first-email.png)

2. The second message doesn't seem to have a lot of insight, but we see that some people might not have changed their email passwords as advised. 

    ![image.png](/assets/images/sec-email.png)

**Task 7: The temporary email password Seina was given**

SSH password: `S1ck3nBluff+secureshell`

**Task 8:  Who sent the email? Using the password from the previous task and the username, connect to the machine using SSH**

![image.png](/assets/images/ssh-login.png)

Using the email sender: `baksteen` and the password: `S1ck3nBluff+secureshell`, I logged into the machine.

**Task 9: What group does the user belong to? Are there files that can be run by that group?**

![image.png](/assets/images/user-id.png)

Using the command `id`, we get to know the user id and the group that the current user belongs to. `baksteen` belongs to the `users` group, and therefore doesn't have root privileges.

Using the command: 

```bash
find / -group users -type f 2>/dev/null
```

we search the whole system for file types only that belong to the group `users` and redirect any error messages to `/dev/null` so that they don't clutter the output.

![image.png](/assets/images/cube.sh-file.png)

We find an interesting file named `cube.sh` that can be edited by the group members in the `users` group. 

**Task 10: Include a reverse shell script in the file** 

The file in question is called `cube.sh`.

